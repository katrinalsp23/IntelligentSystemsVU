import kb, sys
from kb import KB, Boolean, Integer, Constant

# Define our propositional symbols
# J1 is true if the card with index 1 is a jack, etc
# You need to initialise all variables that you need for you strategies and game knowledge.
# Add those variables here.. The following list is complete for the Play Jack strategy.
A0 = Boolean('a0')
T0 = Boolean('t0')
K0 = Boolean('k0')
Q0 = Boolean('q0')
J0 = Boolean('j0')
A1 = Boolean('a1')
T1 = Boolean('t1')
K1 = Boolean('k1')
Q1 = Boolean('q1')
J1 = Boolean('j1')
A2 = Boolean('a2')
T2 = Boolean('t2')
K2 = Boolean('k2')
Q2 = Boolean('q2')
J2 = Boolean('j2')
A3 = Boolean('a3')
T3 = Boolean('t3')
K3 = Boolean('k3')
Q3 = Boolean('q3')
J3 = Boolean('j3')
A4 = Boolean('a4')
T4 = Boolean('t4')
K4 = Boolean('k4')
Q4 = Boolean('q4')
J4 = Boolean('j4')
A5 = Boolean('a5')
T5 = Boolean('t5')
K5 = Boolean('k5')
Q5 = Boolean('q5')
J5 = Boolean('j5')
A6 = Boolean('a6')
T6 = Boolean('t6')
K6 = Boolean('k6')
Q6 = Boolean('q6')
J6 = Boolean('j6')
A7 = Boolean('a7')
T7 = Boolean('t7')
K7 = Boolean('k7')
Q7 = Boolean('q7')
J7 = Boolean('j7')
A8 = Boolean('a8')
T8 = Boolean('t8')
K8 = Boolean('k8')
Q8 = Boolean('q8')
J8 = Boolean('j8')
A9 = Boolean('a9')
T9 = Boolean('t9')
K9 = Boolean('k9')
Q9 = Boolean('q9')
J9 = Boolean('j9')
A10 = Boolean('a10')
T10 = Boolean('t10')
K10 = Boolean('k10')
Q10 = Boolean('q10')
J10 = Boolean('j10')
A11 = Boolean('a11')
T11 = Boolean('t11')
K11 = Boolean('k11')
Q11 = Boolean('q11')
J11 = Boolean('j11')
A12 = Boolean('a12')
T12 = Boolean('t12')
K12 = Boolean('k12')
Q12 = Boolean('q12')
J12 = Boolean('j12')
A13 = Boolean('a13')
T13 = Boolean('t13')
K13 = Boolean('k13')
Q13 = Boolean('q13')
J13 = Boolean('j13')
A14 = Boolean('a14')
T14 = Boolean('t14')
K14 = Boolean('k14')
Q14 = Boolean('q14')
J14 = Boolean('j14')
A15 = Boolean('a15')
T15 = Boolean('t15')
K15 = Boolean('k15')
Q15 = Boolean('q15')
J15 = Boolean('j15')
A16 = Boolean('a16')
T16 = Boolean('t16')
K16 = Boolean('k16')
Q16 = Boolean('q16')
J16 = Boolean('j16')
A17 = Boolean('a17')
T17 = Boolean('t17')
K17 = Boolean('k17')
Q17 = Boolean('q17')
J17 = Boolean('j17')
A18 = Boolean('a18')
T18 = Boolean('t18')
K18 = Boolean('k18')
Q18 = Boolean('q18')
J18 = Boolean('j18')
A19 = Boolean('a19')
T19 = Boolean('t19')
K19 = Boolean('k19')
Q19 = Boolean('q19')
J19 = Boolean('j19')

PC0 = Boolean('pc0')
PC1 = Boolean('pc1')
PC2 = Boolean('pc2')
PC3 = Boolean('pc3')
PC4 = Boolean('pc4')
PC5 = Boolean('pc5')
PC6 = Boolean('pc6')
PC7 = Boolean('pc7')
PC8 = Boolean('pc8')
PC9 = Boolean('pc9')
PC10 = Boolean('pc10')
PC11 = Boolean('pc11')
PC12 = Boolean('pc12')
PC13 = Boolean('pc13')
PC14 = Boolean('pc14')
PC15 = Boolean('pc15')
PC16 = Boolean('pc16')
PC17 = Boolean('pc17')
PC18 = Boolean('pc18')
PC19 = Boolean('pc19')



kb = KB()
# GENERAL INFORMATION ABOUT THE CARDS
# This adds information which cards are Jacks
# kb.add_clause(A0)
# kb.add_clause(T1)
# kb.add_clause(K2)
# kb.add_clause(Q3)
# kb.add_clause(J4)
# kb.add_clause(A5)
# kb.add_clause(T6)
# kb.add_clause(K7)
# kb.add_clause(Q8)
# kb.add_clause(J9)
# kb.add_clause(A10)
# kb.add_clause(T11)
# kb.add_clause(K12)
# kb.add_clause(Q13)
# kb.add_clause(J14)
# kb.add_clause(A15)
# kb.add_clause(T16)
# kb.add_clause(K17)
# kb.add_clause(Q18)
# kb.add_clause(J19)

# Add here whatever is needed for your strategy.


# DEFINITION OF THE STRATEGY
# Add clauses (This list is sufficient for this strategy)
# PJ is the strategy to play jacks first, so all we need to model is all x PJ(x) <-> J(x),
# In other words that the PJ strategy should play a card when it is a jack
kb.add_clause(~PC4, Q3, K2, T1, A0)
kb.add_clause(PC4, ~Q3, ~K2, ~T1, ~A0)
kb.add_clause(~PC9, Q8, K7, T6, A5)
kb.add_clause(PC9, ~Q8, ~K7, ~T6, ~A5)
kb.add_clause(~PC14, Q13, K12, T11, A10)
kb.add_clause(PC14, ~Q13, ~K12, ~T11, ~A10)
kb.add_clause(~PC19, Q18, K17, T16, A15)
kb.add_clause(PC19, ~Q18, ~K17, ~T16, ~A15)

kb.add_clause(A0)
kb.add_clause(T1)
kb.add_clause(K2)
# kb.add_clause(Q3)

kb.add_clause(~PC4)

# # Create a new knowledge base
#
#
# # GENERAL INFORMATION ABOUT THE CARDS
# # This adds information which cards are Jacks
# kb.add_clause(J4)
# kb.add_clause(J9)
# kb.add_clause(J14)
# kb.add_clause(J19)
# # Add here whatever is needed for your strategy.
#
# # DEFINITION OF THE STRATEGY
# # Add clauses (This list is sufficient for this strategy)
# # PJ is the strategy to play jacks first, so all we need to model is all x PJ(x) <-> J(x),
# # In other words that the PJ strategy should play a card when it is a jack
# kb.add_clause(~J4, PJ4)
# kb.add_clause(~J9, PJ9)
# kb.add_clause(~J14, PJ14)
# kb.add_clause(~J19, PJ19)
# kb.add_clause(~PJ4, J4)
# kb.add_clause(~PJ9, J9)
# kb.add_clause(~PJ14, J14)
# kb.add_clause(~PJ19, J19)
# # Add here other strategies

# kb.add_clause(~PC19)
# Print all models of the knowledge base
# for model in kb.models():
#     print model

# Print out whether the KB is satisfiable (if there are no models, it is not satisfiable)
print kb.satisfiable()
